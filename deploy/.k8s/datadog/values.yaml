## Default values for Datadog Agent
## See Datadog helm documentation to learn more:
## https://docs.datadoghq.com/agent/kubernetes/helm/

## @param targetSystem - string - required
## Set the target OS for this deployment
## Possible values: linux, windows
#
targetSystem: "linux"

datadog:
    apmEnabled: true
    nonLocalTraffic: true

    ## @param apiKey - string - required
    ## Set this to your Datadog API key before the Agent runs.
    ## ref: https://app.datadoghq.com/account/settings#agent/kubernetes
    #
    apiKey: <DATADOG_API_KEY>

    ## @param logLevel - string - required
    ## Set logging verbosity, valid log levels are:
    ## trace, debug, info, warn, error, critical, and off
    #
    logLevel: INFO

    ## @param kubeStateMetricsEnabled - boolean - required
    ## If true, deploys the kube-state-metrics deployment.
    ## ref: https://github.com/kubernetes/charts/tree/master/stable/kube-state-metrics
    #
    kubeStateMetricsEnabled: true

    ## @param clusterChecks - object - required
    ## Enable the Cluster Checks feature on both the cluster-agents and the daemonset
    ## ref: https://docs.datadoghq.com/agent/autodiscovery/clusterchecks/
    ## Autodiscovery via Kube Service annotations is automatically enabled
    #
    clusterChecks:
        enabled: false

    ## @param dogstatsd - object - required
    ## dogstatsd configuration
    ## ref: https://docs.datadoghq.com/agent/kubernetes/dogstatsd/
    ## To emit custom metrics from your Kubernetes application, use DogStatsD.
    #
    dogstatsd:
        ## @param port - integer - optional - default: 8125
        ## Override the Agent DogStatsD port.
        ## Note: Make sure your client is sending to the same UDP port.
        #
        port: 8125

    ## @param collectEvents - boolean - optional - default: false
    ## Enables this to start event collection from the kubernetes API
    ## ref: https://docs.datadoghq.com/agent/kubernetes/event_collection/
    #
    collectEvents: true

    ## @param leaderElection - boolean - optional - default: false
    ## Enables leader election mechanism for event collection.
    #
    leaderElection: true

    ## @param logs - object - required
    ## Enable logs agent and provide custom configs
    #
    logs:
        ## @param enabled - boolean - optional - default: false
        ## Enables this to activate Datadog Agent log collection.
        ## ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        #
        enabled: true

        ## @param containerUseFiles - boolean - optional - default: true
        ## Collect logs from files in /var/log/pods instead of using container runtime API.
        ## It's usually the most efficient way of collecting logs.
        ## ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        #
        containerCollectUsingFiles: true

    ## @param apm - object - required
    ## Enable apm agent and provide custom configs
    #
    apm:
        ## @param enabled - boolean - optional - default: false
        ## Enable this to enable APM and tracing, on port 8126
        ## ref: https://github.com/DataDog/docker-dd-agent#tracing-from-the-host
        #
        enabled: false

        ## @param port - integer - optional - default: 8126
        ## Override the trace Agent DogStatsD port.
        ## Note: Make sure your client is sending to the same UDP port.
        #
        port: 8126

    ## @param processAgent - object - required
    ## Enable process agent and provide custom configs
    #
    processAgent:
        ## @param enabled - boolean - required
        ## Set this to true to enable live process monitoring agent
        ## Note: /etc/passwd is automatically mounted to allow username resolution.
        ## ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        #
        enabled: true

        ## @param processCollection - boolean - required
        ## Set this to true to enable process collection in process monitoring agent
        ## Requires processAgent.enabled to be set to true to have any effect
        #
        processCollection: true

    ## @param systemProbe - object - required
    ## Enable systemProbe agent and provide custom configs
    #
    systemProbe:
        ## @param enabled - boolean - required
        ## Set this to true to enable system-probe agent
        #
        enabled: true

        ## @param debugPort - integer - required
        ## Specify the port to expose pprof and expvar for system-probe agent
        #
        debugPort: 0

        ## @param enableConntrack - boolean - required
        ## Enable the system-probe agent to connect to the netlink/conntrack subsystem
        ## to add NAT information to connection data
        ## Ref: http://conntrack-tools.netfilter.org/
        #
        enableConntrack: true

        ## @param seccomp - string - required
        ## Apply an ad-hoc seccomp profile to the system-probe agent to restrict its privileges
        ## Note that this will break `kubectl exec â€¦ -c system-probe -- /bin/bash`
        #
        seccomp: localhost/system-probe

        ## @param seccompRoot - string - required
        ## Specify the seccomp profile root directory
        #
        seccompRoot: /var/lib/kubelet/seccomp

        ## @param bpfDebug - boolean - required
        ## Enable logging for kernel debug
        #
        bpfDebug: false

        ## @param apparmor profile - string - required
        ## specify a apparmor profile for system-probe
        #
        apparmor: unconfined

## @param clusterAgent - object - required
## This is the Datadog Cluster Agent implementation that handles cluster-wide
## metrics more cleanly, separates concerns for better rbac, and implements
## the external metrics API so you can autoscale HPAs based on datadog metrics
## ref: https://docs.datadoghq.com/agent/kubernetes/cluster/
#
clusterAgent:
    ## @param enabled - boolean - required
    ## Set this to true to enable Datadog Cluster Agent
    #
    enabled: false

    ## @param image - object - required
    ## Define the Datadog Cluster-Agent image to work with.
    #
    image:
        ## @param repository - string - required
        ## Define the repository to use:
        #
        repository: datadog/cluster-agent

        ## @param tag - string - required
        ## Define the Cluster-Agent version to use.
        #
        tag: 1.5.2

        ## @param pullPolicy - string - required
        ## The Kubernetes pull policy.
        #
        pullPolicy: IfNotPresent

    ## @param token - string - required
    ## This needs to be at least 32 characters a-zA-z
    ## It is a preshared key between the node agents and the cluster agent
    ## ref:
    #
    token: ""

    ## @param replicas - integer - required
    ## Specify the of cluster agent replicas, if > 1 it allow the cluster agent to
    ## work in HA mode.
    #
    replicas: 1

    ## @param rbac - object - required
    ## Provide Cluster Agent Deployment pod(s) RBAC configuration
    rbac:
        ## @param created - boolean - required
        ## If true, create & use RBAC resources
        #
        create: true

        ## @param serviceAccountName - string - required
        ## Ignored if clusterAgentrbac.create is true
        #
        serviceAccountName: default

    ## @param metricsProvider - object - required
    ## Enable the metricsProvider to be able to scale based on metrics in Datadog
    #
    metricsProvider:
        enabled: false

        ## @param wpaController - boolean - optional
        ## Enable informer and controller of the watermark pod autoscaler
        #
        wpaController: false

        ## Configuration for the service for the cluster-agent metrics server
        #
        service:
            ## @param type - string - optional
            ##
            #
            type: ClusterIP
            ## @param port - int - optional
            ##
            port: 443

    ## @param resources - object -required
    ## Datadog cluster-agent resource requests and limits.
    #
    resources: {}

    ## @param healthPort - integer - optional - default: 8080
    ## Port number use the cluster-agent to server healthz endpoint
    healthPort: 8080

    ## @param livenessProbe - object - required
    ## Override the agent's liveness probe logic from the default:
    ## In case of issues with the probe, you can disable it with the
    ## following values, to allow easier investigating:
    #
    livenessProbe:
        httpGet:
            port: 5000
            path: /metrics
            scheme: HTTP

    ## @param readinessProbe - object - required
    ## Override the cluster-agent's readiness probe logic from the default:
    #
    readinessProbe:
        httpGet:
            port: 5000
            path: /metrics
            scheme: HTTP

    ## @param strategy - string - required
    ## Allow the Cluster Agent deployment to perform a rolling update on helm update
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    #
    strategy:
        type: RollingUpdate
        rollingUpdate:
            maxSurge: 1
            maxUnavailable: 0

    ## @param createPodDisruptionBudget - boolean - optional
    ## Specify the pod disruption budget to apply to the cluster agents
    #
    createPodDisruptionBudget: false

kubeStateMetrics:
    ## @param enabled - boolean - required
    ## If true, deploys the kube-state-metrics deployment.
    ## ref: https://github.com/kubernetes/charts/tree/master/stable/kube-state-metrics
    #
    enabled: true

agents:
    ## @param enabled - boolean - required
    ## You should keep Datadog DaemonSet enabled!
    ## The exceptional case could be a situation when you need to run
    ## single Datadog pod per every namespace, but you do not need to
    ## re-create a DaemonSet for every non-default namespace install.
    ## Note: StatsD and DogStatsD work over UDP, so you may not
    ## get guaranteed delivery of the metrics in Datadog-per-namespace setup!
    #
    enabled: true

    ## @param image - object - required
    ## Define the Datadog image to work with.
    #
    image:
        ## @param repository - string - required
        ## Define the repository to use:
        ## use "datadog/agent" for Datadog Agent 7
        ## use "datadog/dogstatsd" for Standalone Datadog Agent DogStatsD 7
        #
        repository: datadog/agent

        ## @param tag - string - required
        ## Define the Agent version to use.
        ## Use 7-jmx to enable jmx fetch collection
        #
        tag: "7"

        ## @param pullPolicy - string - required
        ## The Kubernetes pull policy.
        #
        pullPolicy: IfNotPresent

    ## @param rbac - object - required
    ## Provide Daemonset RBAC configuration
    rbac:

        ## @param created - boolean - required
        ## If true, create & use RBAC resources
        #
        create: true

        ## @param serviceAccountName - string - required
        ## Ignored if daemonset.rbac.create is true
        #
        serviceAccountName: default

    containers:
        agent:

            ## @param resources - object - required
            ## Resource requests and limits for the agent container.
            #
            resources: {}

            ## @param livenessProbe - object - required
            ## Override the agent's liveness probe logic from the default:
            ## In case of issues with the probe, you can disable it with the
            ## following values, to allow easier investigating:
            #
            livenessProbe:
                httpGet:
                    path: /health
                    port: 5555
                initialDelaySeconds: 15
                periodSeconds: 15
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 6

        processAgent:

            ## @param resources - object - required
            ## Resource requests and limits for the process-agent container.
            #
            resources: {}

        traceAgent:

            ## @param resources - object - required
            ## Resource requests and limits for the trace-agent container.
            #
            resources: {}

            ## @param livenessProbe - object - optional
            ## Override the trace agent's liveness probe logic from the default:
            ## In case of issues with the probe, you can disable it with the
            ## following values, to allow easier investigating:
            #
            livenessProbe:
                tcpSocket:
                    port: 8126
                initialDelaySeconds: 15
                periodSeconds: 15
                timeoutSeconds: 5

        systemProbe:

            ## @param resources - object - required
            ## Resource requests and limits for the system-probe container.
            #
            resources: {}

        initContainers:
            ## @param resources - object - required
            ## Resource requests and limits for the init containers.
            #
            resources: {}

    ## @param updateStrategy - string - optional
    ## Allow the DaemonSet to perform a rolling update on helm update
    ## ref: https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/
    #
    updateStrategy:
        type: RollingUpdate
        rollingUpdate:
            maxUnavailable: "10%"


clusterChecksRunner:
    ## @param enabled - boolean - required
    ## If true, deploys agent dedicated for running the Cluster Checks
    ## instead of running in the Daemonset's agents.
    ## ref: https://docs.datadoghq.com/agent/autodiscovery/clusterchecks/
    #
    enabled: false

    ## @param image - object - required
    ## Define the Datadog image to work with.
    #
    image:

        ## @param repository - string - required
        ## Define the repository to use:
        ## use "datadog/agent" for Datadog Agent 7
        ## use "datadog/dogstatsd" for Standalone Datadog Agent DogStatsD 7
        #
        repository: datadog/agent

        ## @param tag - string - required
        ## Define the Agent version to use.
        ## Use 7-jmx to enable jmx fetch collection
        #
        tag: "7"

        ## @param pullPolicy - string - required
        ## The Kubernetes pull policy.
        #
        pullPolicy: IfNotPresent

    ## @param createPodDisruptionBudget - boolean - optional
    ## Specify the pod disruption budget to apply to the cluster checks agents
    #
    createPodDisruptionBudget: false

    ## @param rbac - object - required
    ## Provide Cluster Checks Deployment pods RBAC configuration
    rbac:
        ## @param created - boolean - required
        ## If true, create & use RBAC resources
        #
        create: true

        ## @param dedicated - boolean - required
        ## If true, use a dedicated RBAC resource for the cluster checks agent(s)
        #
        dedicated: false

        ## @param serviceAccountName - string - required
        ## Ignored if clusterChecksRunner.rbac.create is true
        #
        serviceAccountName: default

    ## @param replicas - integer - required
    ## If you want to deploy the cluckerchecks agent in HA,
    ## keep at least clusterChecksRunner.replicas set to 2.
    ## And increase the clusterChecksRunner.replicas according to the number of Cluster Checks.
    #
    replicas: 2

    ## @param resources - object -required
    ## Datadog clusterchecks-agent resource requests and limits.
    #
    resources: {}

    ## @param strategy - string - optional
    ## Allow the ClusterChecks deployment to perform a rolling update on helm update
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    #
    strategy:
        type: RollingUpdate
        rollingUpdate:
            maxSurge: 1
            maxUnavailable: 0


kube-state-metrics:
    rbac:
        ## @param created - boolean - required
        ## If true, create & use RBAC resources
        #
        create: true

    serviceAccount:
        ## @param created - boolean - required
        ## If true, create ServiceAccount, require rbac kube-state-metrics.rbac.create true
        #
        create: true
        ## @param name - string - required
        ## The name of the ServiceAccount to use.
        ## If not set and create is true, a name is generated using the fullname template
        #
        name:

    resources:
        requests:
            cpu: 1m

daemonset:
    useHostPort: true
